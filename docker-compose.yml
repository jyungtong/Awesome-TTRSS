services:
  service.ttrss:
    image: wangqiru/ttrss:latest
    container_name: ttrss
    ports:
      - 181:80
    environment:
      - SELF_URL_PATH=http://localhost:181 # please change to your own domain
      - DB_PASS=ttrss # use the same password defined in `database.postgres`
      - PUID=1000
      - PGID=1000
      - ALLOW_PORTS=1200
    volumes:
      - cache:/var/www/cache/
    networks:
      - public_access
      - service_only
      - database_only
    stdin_open: true
    tty: true
    depends_on:
      - database.postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 5

  # service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page
  #   image: wangqiru/mercury-parser-api:latest
  #   container_name: mercury
  #   networks:
  #     - public_access
  #     - service_only
  #   restart: always
  #
  # service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page
  #   image: wangqiru/opencc-api-server:latest
  #   container_name: opencc
  #   environment:
  #     - NODE_ENV=production
  #   networks:
  #     - service_only
  #   restart: always

  database.postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_PASSWORD=ttrss # feel free to change the password
    volumes:
      - ~/postgres/data/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host
    networks:
      - database_only
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      start_period: 30s
      interval: 30s
      timeout: 10s
      retries: 5

  # utility.watchtower:
  #   container_name: watchtower
  #   image: containrrr/watchtower:latest
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_POLL_INTERVAL=86400
  #   restart: always

  rsshub:
    container_name: rsshub
    image: diygod/rsshub:latest
    environment:
      NODE_ENV: production
      PUPPETEER_WS_ENDPOINT: "ws://browserless:3000" # marked
      CACHE_TYPE: redis
      REDIS_URL: "redis://redis:6379/"
      DEBUG_INFO: false
      LOGGER_LEVEL: error
      NO_LOGFILES: true
    networks:
      - public_access
      - service_only
    # expose:
    #   - 1200
    restart: unless-stopped
    depends_on:
      - browserless
      - redis

  browserless: # marked
    container_name: browserless # marked
    image: browserless/chrome # marked
    restart: always # marked
    ulimits: # marked
        core: # marked
            hard: 0 # marked
            soft: 0 # marked
    healthcheck: # marked
        test: ["CMD", "curl", "-f", "http://localhost:3000/pressure"] # marked
        interval: 30s # marked
        timeout: 10s # marked
        retries: 3 # marked
    networks:
      - service_only

  redis:
    image: redis:alpine
    restart: always
    volumes:
        - redis-data:/data
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 5s
    networks:
      - service_only

volumes:
  cache:
  redis-data:

networks:
  public_access: # Provide the access for ttrss UI
  service_only: # Provide the communication network between services only
    internal: true
  database_only: # Provide the communication between ttrss and database only
    internal: true
